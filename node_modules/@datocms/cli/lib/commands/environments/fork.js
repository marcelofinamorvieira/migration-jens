"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = require("@datocms/cli-utils");
class Command extends cli_utils_1.CmaClientCommand {
    async run() {
        const { SOURCE_ENVIRONMENT_ID: srcEnvId, NEW_ENVIRONMENT_ID: newEnvId } = this.parsedArgs;
        try {
            const sourceEnv = await this.client.environments.find(srcEnvId);
            this.startSpinner(`Creating a fork of "${sourceEnv.id}" called "${newEnvId}"`);
            const environment = await this.client.environments.fork(sourceEnv.id, {
                id: newEnvId,
            });
            this.stopSpinner();
            return environment;
        }
        catch (e) {
            if (e instanceof cli_utils_1.CmaClient.ApiError && e.findError('NOT_FOUND')) {
                this.error(`An environment called "${srcEnvId}" does not exist`);
            }
            if (e instanceof cli_utils_1.CmaClient.ApiError &&
                e.findError('INVALID_FIELD', {
                    field: 'name',
                    code: 'VALIDATION_UNIQUENESS',
                })) {
                this.error(`An environment called "${newEnvId}" already exists`, {
                    suggestions: [
                        `To delete the environment, run "${this.config.bin} environments:destroy ${newEnvId}"`,
                    ],
                });
            }
            throw e;
        }
    }
}
exports.default = Command;
Command.description = 'Creates a new sandbox environment by forking an existing one';
Command.args = [
    {
        name: 'SOURCE_ENVIRONMENT_ID',
        description: 'The environment to copy',
        required: true,
    },
    {
        name: 'NEW_ENVIRONMENT_ID',
        description: 'The name of the new sandbox environment to generate',
        required: true,
    },
];
