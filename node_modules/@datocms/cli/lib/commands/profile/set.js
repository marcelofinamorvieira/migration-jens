"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cli_utils_1 = require("@datocms/cli-utils");
const lodash_1 = require("lodash");
class Command extends cli_utils_1.DatoConfigCommand {
    async run() {
        var _a, _b, _c, _d, _e, _f;
        if (!this.datoConfig) {
            this.log(`Config file not present in "${this.datoConfigRelativePath}", will be created from scratch`);
        }
        const profileId = this.parsedArgs.PROFILE_ID;
        this.log(`Requested to configure profile "${profileId}"`);
        let existingProfileConfig;
        if (this.datoConfig && profileId in this.datoConfig.profiles) {
            existingProfileConfig = this.datoConfig.profiles[profileId];
            this.log(`Config file already has profile "${profileId}", existing settings will be overridden`);
        }
        this.log();
        const logLevel = this.parsedFlags['log-level'] ||
            (await cli_utils_1.oclif.CliUx.ux.prompt(`* Level of logging to use for the profile (${cli_utils_1.logLevelOptions.join(', ')})`, {
                default: (existingProfileConfig === null || existingProfileConfig === void 0 ? void 0 : existingProfileConfig.logLevel) || 'NONE',
                required: true,
            }));
        const migrationsDir = this.parsedFlags['migrations-dir'] ||
            (await cli_utils_1.oclif.CliUx.ux.prompt(`* Directory where script migrations will be stored`, {
                default: ((_a = existingProfileConfig === null || existingProfileConfig === void 0 ? void 0 : existingProfileConfig.migrations) === null || _a === void 0 ? void 0 : _a.directory) ||
                    (Object.keys(((_b = this.datoConfig) === null || _b === void 0 ? void 0 : _b.profiles) || {}).length -
                        (existingProfileConfig ? 1 : 0) ===
                        0
                        ? './migrations'
                        : `./${(0, lodash_1.camelCase)(`${profileId} migrations`)}`),
                required: true,
            }));
        const migrationModelApiKey = this.parsedFlags['migrations-model'] ||
            (await cli_utils_1.oclif.CliUx.ux.prompt(`* API key of the DatoCMS model used to store migration data`, {
                default: ((_c = existingProfileConfig === null || existingProfileConfig === void 0 ? void 0 : existingProfileConfig.migrations) === null || _c === void 0 ? void 0 : _c.modelApiKey) ||
                    'schema_migration',
                required: true,
            }));
        const migrationTemplate = this.parsedFlags['migrations-template'] ||
            (await cli_utils_1.oclif.CliUx.ux.prompt(`* Path of the file to use as migration script template (optional)`, {
                default: (_d = existingProfileConfig === null || existingProfileConfig === void 0 ? void 0 : existingProfileConfig.migrations) === null || _d === void 0 ? void 0 : _d.template,
                required: false,
            }));
        await this.saveDatoConfig({
            ...this.datoConfig,
            profiles: {
                ...(_e = this.datoConfig) === null || _e === void 0 ? void 0 : _e.profiles,
                [profileId]: {
                    ...(_f = this.datoConfig) === null || _f === void 0 ? void 0 : _f.profiles[profileId],
                    logLevel,
                    migrations: {
                        directory: migrationsDir,
                        modelApiKey: migrationModelApiKey,
                        template: migrationTemplate,
                    },
                },
            },
        });
    }
}
exports.default = Command;
Command.description = 'Add/update profile configuration in DatoCMS config file';
Command.args = [
    {
        name: 'PROFILE_ID',
        description: 'Name of the profile to create/update',
        default: 'default',
        required: true,
    },
];
Command.flags = {
    ...cli_utils_1.DatoConfigCommand.flags,
    'log-level': cli_utils_1.oclif.Flags.enum({
        options: cli_utils_1.logLevelOptions,
        description: 'Level of logging to use for the profile',
    }),
    'migrations-dir': cli_utils_1.oclif.Flags.string({
        description: 'Directory where script migrations will be stored',
    }),
    'migrations-model': cli_utils_1.oclif.Flags.string({
        description: 'API key of the DatoCMS model used to store migration data',
    }),
    'migrations-template': cli_utils_1.oclif.Flags.string({
        description: 'Path of the file to use as migration script template',
    }),
    'base-url': cli_utils_1.oclif.Flags.string({ hidden: true }),
};
