"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatoProfileConfigCommand = void 0;
const core_1 = require("@oclif/core");
const dato_config_command_1 = require("./dato-config-command");
class DatoProfileConfigCommand extends dato_config_command_1.DatoConfigCommand {
    async init() {
        await super.init();
        if (this.parsedFlags.profile) {
            if (!this.datoConfig) {
                this.error(`Requested profile "${this.parsedFlags.profile}" but cannot find config file`, {
                    suggestions: [
                        `Create profile with "${this.config.bin} profile:set ${this.parsedFlags.profile}"`,
                    ],
                });
            }
            if (!(this.parsedFlags.profile in this.datoConfig.profiles)) {
                this.error(`Requested profile "${this.parsedFlags.profile}" is not defined in config file "${this.datoConfigRelativePath}"`, {
                    suggestions: [
                        `Configure it with "${this.config.bin} profile:set ${this.parsedFlags.profile}"`,
                    ],
                });
            }
        }
        else if (this.datoConfig &&
            Object.keys(this.datoConfig.profiles).length > 1) {
            this.error(`Multiple profiles detected in config file "${this.datoConfigRelativePath}"`, {
                suggestions: [
                    `Specify which profile to use with the "--profile" flag, or the DATOCMS_PROFILE env variable (we look inside a local ".env" file too)`,
                ],
            });
        }
        this.profileId = this.parsedFlags.profile || 'default';
        this.datoProfileConfig =
            this.datoConfig && this.profileId in this.datoConfig.profiles
                ? this.datoConfig.profiles[this.profileId]
                : undefined;
    }
    requireDatoProfileConfig() {
        this.requireDatoConfig();
        if (!this.datoProfileConfig) {
            this.error('No profile specified!', {
                suggestions: [
                    'Provide the --profile option or specify a DATOCMS_PROFILE env variable',
                ],
            });
        }
    }
}
exports.DatoProfileConfigCommand = DatoProfileConfigCommand;
DatoProfileConfigCommand.flags = {
    ...dato_config_command_1.DatoConfigCommand.flags,
    profile: core_1.Flags.string({
        description: 'Use settings of profile in datocms.config.js',
        env: 'DATOCMS_PROFILE',
    }),
};
