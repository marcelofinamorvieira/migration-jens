import { Command } from '@oclif/core';
import { ParserOutput, FlagInput } from '@oclif/core/lib/interfaces';
declare type InferredFlagsType<T> = T extends FlagInput<infer F> ? F & {
    json: boolean | undefined;
    output: string | undefined;
} : any;
export declare abstract class BaseCommand<T extends typeof BaseCommand.flags> extends Command {
    static flags: {};
    static enableJsonFlag: boolean;
    protected parsedOutput: ParserOutput<any, any>;
    protected parsedArgs: {
        [name: string]: string;
    };
    protected parsedFlags: InferredFlagsType<T>;
    protected init(): Promise<void>;
    protected toErrorJson(err: any): any;
    protected startSpinner(action: string, status?: string, opts?: {
        stdout?: boolean;
    }): void;
    protected stopSpinner(message?: string): void;
    protected printTable<T extends Record<string, unknown>>(data: T[], primaryColumns: string[], extendedColumns: string[]): void;
}
export {};
