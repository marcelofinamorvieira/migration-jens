"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatoConfigCommand = void 0;
const core_1 = require("@oclif/core");
const config_1 = require("./config");
const path_1 = require("path");
const promises_1 = require("fs/promises");
const base_command_1 = require("./base-command");
class DatoConfigCommand extends base_command_1.BaseCommand {
    async init() {
        await super.init();
        this.datoConfigPath = (0, path_1.resolve)(process.cwd(), this.parsedFlags['config-file']);
        this.datoConfigRelativePath = (0, path_1.relative)(process.cwd(), this.datoConfigPath);
        this.datoConfig = await (0, config_1.readConfig)(this.datoConfigPath);
    }
    requireDatoConfig() {
        if (!this.datoConfig) {
            this.error(`No config file found in "${this.datoConfigRelativePath}"`, {
                suggestions: [
                    `Configure a local configuration profile with "${this.config.bin} profile:set"`,
                ],
            });
        }
    }
    async saveDatoConfig(config) {
        this.startSpinner(`Writing "${this.datoConfigRelativePath}"`);
        await (0, promises_1.writeFile)(this.datoConfigPath, JSON.stringify(config, null, 2), 'utf-8');
        this.stopSpinner();
    }
}
exports.DatoConfigCommand = DatoConfigCommand;
DatoConfigCommand.flags = {
    ...base_command_1.BaseCommand.flags,
    'config-file': core_1.Flags.string({
        description: 'Specify a custom config file path',
        env: 'DATOCMS_CONFIG_FILE',
        default: './datocms.config.json',
    }),
};
