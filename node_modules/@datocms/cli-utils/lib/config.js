"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readConfig = void 0;
const promises_1 = require("fs/promises");
const lodash_1 = require("lodash");
function isProfileConfig(thing) {
    if (typeof thing !== 'object' || !thing) {
        return false;
    }
    for (const key of [
        'apiToken',
        'baseUrl',
        'logLevel',
        'migrations.directory',
        'migrations.modelApiKey',
    ]) {
        const value = (0, lodash_1.get)(thing, key);
        if (value !== undefined && typeof value !== 'string') {
            return false;
        }
    }
    return true;
}
function isConfig(thing) {
    if (typeof thing !== 'object' || !thing) {
        return false;
    }
    if (!('profiles' in thing)) {
        return false;
    }
    const { profiles } = thing;
    if (typeof profiles !== 'object' || !profiles) {
        return false;
    }
    if (Object.values(profiles).some((profileConfig) => !isProfileConfig(profileConfig))) {
        return false;
    }
    return true;
}
async function readConfig(fullPath) {
    try {
        await (0, promises_1.access)(fullPath);
    }
    catch {
        return undefined;
    }
    const rawConfig = await (0, promises_1.readFile)(fullPath, 'utf-8');
    const config = JSON.parse(rawConfig);
    if (!isConfig(config)) {
        throw new Error(`Invalid configuration file at "${fullPath}"!`);
    }
    return config;
}
exports.readConfig = readConfig;
