"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmaClientCommand = exports.logLevelOptions = exports.logLevelMap = void 0;
const cma_client_node_1 = require("@datocms/cma-client-node");
const core_1 = require("@oclif/core");
const dato_profile_config_command_1 = require("./dato-profile-config-command");
const chalk = require("chalk");
exports.logLevelMap = {
    NONE: cma_client_node_1.LogLevel.NONE,
    BASIC: cma_client_node_1.LogLevel.BASIC,
    BODY: cma_client_node_1.LogLevel.BODY,
    BODY_AND_HEADERS: cma_client_node_1.LogLevel.BODY_AND_HEADERS,
};
exports.logLevelOptions = Object.keys(exports.logLevelMap);
class CmaClientCommand extends dato_profile_config_command_1.DatoProfileConfigCommand {
    async init() {
        await super.init();
        this.client = this.buildClient();
    }
    buildBaseClientInitializationOptions() {
        var _a, _b;
        const apiTokenEnvName = this.profileId === 'default'
            ? `DATOCMS_API_TOKEN`
            : `DATOCMS_${this.profileId.toUpperCase()}_PROFILE_API_TOKEN`;
        const apiToken = this.parsedFlags['api-token'] || process.env[apiTokenEnvName];
        const baseUrl = this.parsedFlags['base-url'] || ((_a = this.datoProfileConfig) === null || _a === void 0 ? void 0 : _a.baseUrl);
        const logLevelCode = this.parsedFlags['log-level'] || ((_b = this.datoProfileConfig) === null || _b === void 0 ? void 0 : _b.logLevel);
        const logLevel = this.parsedFlags.json || this.parsedFlags.output || !logLevelCode
            ? cma_client_node_1.LogLevel.NONE
            : exports.logLevelMap[logLevelCode];
        if (!apiToken) {
            this.error(`Cannot find an API token to use to call DatoCMS!`, {
                suggestions: [
                    `The API token to use is determined by looking at:
* The --api-token flag
* The ${apiTokenEnvName} environment variable (we look inside a local ".env" file too)`,
                ],
            });
        }
        return {
            apiToken,
            baseUrl,
            logLevel,
        };
    }
    buildClient(config = {}) {
        return (0, cma_client_node_1.buildClient)({
            ...this.buildBaseClientInitializationOptions(),
            logFn: (message) => {
                this.log(chalk.gray(message));
            },
            ...config,
        });
    }
    async catch(err) {
        try {
            return await super.catch(err);
        }
        catch (err) {
            if (err instanceof cma_client_node_1.ApiError) {
                if (err.findError('INVALID_AUTHORIZATION_HEADER')) {
                    this.error('Invalid API token');
                }
                if (err.findError('INSUFFICIENT_PERMISSIONS')) {
                    this.error('The API token does not have the necessary permission to perform the operation');
                }
            }
            throw err;
        }
    }
}
exports.CmaClientCommand = CmaClientCommand;
CmaClientCommand.flags = {
    ...dato_profile_config_command_1.DatoProfileConfigCommand.flags,
    'api-token': core_1.Flags.string({
        description: 'Specify a custom API key to access a DatoCMS project',
    }),
    'log-level': core_1.Flags.enum({
        options: exports.logLevelOptions,
        description: 'Level of logging for performed API calls',
    }),
    'base-url': core_1.Flags.string({ hidden: true }),
};
